{
  "name": "C norm",
  "tagline": "C Norm",
  "body": "# C Norm\r\n\r\n## Foreword\r\n\r\nThe norm is not a constraint.\r\n\r\nThe norm is a safeguard to guide you in writing a simple C.\r\n\r\n### Why a norm is needed ?\r\n\r\nThe norm has two main goals:\r\n\r\n+ Harmonize your codes so that everyone can read them easily\r\n+ Write simple and clear codes\r\n\r\n## The norm\r\n\r\n### Naming convention\r\n\r\nRequired :\r\n* Global variables must be in uppercase letters\r\n* Name of variables, functions, files, directories must be composed of lowercase letters (`a-z`), number (`1-9`) and underscore (`'_'`) and are in English\r\n* Non-ASCII characters are forbidden\r\n\r\nAdvised :\r\n* Variables, functions, macros, types, files and directories must be explicit\r\n* It's not recommended to use global variables\r\n\r\n### Format\r\n\r\nRequired :\r\n* All your files must begin with the norm header\r\n* One instruction per line\r\n* Empty lines must not contain spaces or tabulation\r\n* Tabulations must be replaced by 2 or 4 spaces\r\n* Semicolon (`;`) bust be follow by a space if not end of line\r\n* Pointer stars must be sticked to the variable name\r\n* Only one variable declaration per line\r\n* Declarations must be at the beginning of the function\r\n\r\nAdvised :\r\n* A function doesn't exceed 25 lines\r\n* A line, including comments, doesn't be greater than 80 columns\r\n* A `.c` doesn't exceed 5 functions\r\n\r\n\r\n### Function\r\n\r\nRequired :\r\n* A function with no arguments must have a prototype with `void` as parameter\r\n\r\nAdvised :\r\n* You can use variable name in prototypes\r\n\r\n## Headers\r\n\r\nYou must follow this rules ( [umich.edu](http://umich.edu/~eecs381/handouts/CHeaderFileGuidelines.pdf) for more details) :\r\n> + Rule #1. Each module with its .h and .c file should correspond to a clear piece of functionality.\r\n> + Rule #2. Always use “include guards” in a header file.\r\n> + Rule #3. All of the declarations needed to use a module must appear in its header file, and this file is always used to access the module.\r\n> + Rule #4. The header file contains only declarations, and is included by the .c file for the module.\r\n> + Rule #5. Set up program-wide global variables with an extern declaration in the header file, and a defining declaration in the .c file.\r\n> + Rule #6. Keep a module’s internal declarations out of the header file.\r\n> + Rule #7. Every header file A.h should #include every other header file that A.h requires to compile correctly, but no more.\r\n> + Rule #8. If an incomplete declaration of a structure type X will do, use it instead of #including its header X.h.\r\n> + Rule #9. The content of a header file should compile correctly by itself.\r\n> + Rule #10. The A.c file should first #include its A.h file, and then any other headers required for its code.\r\n> + Rule #11. Never #include a .c file for any reason!\r\n\r\n### Comments\r\n\r\nRequired :\r\n* Comments begin and end with an empty line\r\n* Every transitional lines must be align each others, and begin by `*`\r\n* No comments with `//`\r\n* Comments are in English\r\n* Function coment must be just before the function\r\n\r\nNot recommended :\r\n* Comments inside a function\r\n\r\nExamples :\r\n\r\n``` c\r\n/*\r\n * Normal comment\r\n * with multiple lines\r\n */\r\n\r\n/* Normal comment with one line  */\r\n```\r\n\r\n### Others\r\n\r\nForbidden :\r\n* Usage of `goto`\r\n\r\nNot recommended :\r\n* Usage of `do while`\r\n* Usage of `switch`/`case`\r\n\r\nAuthorized :\r\n* Usage of `for`\r\n\r\n## Norm headers\r\n\r\n### Example of `.h` header\r\n\r\n``` c\r\n/******************************************************************************\r\n *\r\n * File Name        : test.h\r\n * Created By       : Alexandre ZANNI\r\n * Creation Date    : 06/01/2016\r\n * Last Changed By  : Alexandre ZANNI\r\n * Last Change      : 06/01/2016 19:07:46\r\n * Description      :\r\n * Version          : 1.0\r\n * Revision         : none\r\n *\r\n ******************************************************************************\r\n */\r\n```\r\n\r\n### Exemple of makefile header\r\n\r\n```\r\n###############################################################################\r\n# File Name       : Makefile                                                  #\r\n# Created By      : Alexandre ZANNI                                           #\r\n# Creation Date   : 06/01/2016                                                #\r\n# Last Changed By : Alexandre ZANNI                                           #\r\n# Last Changed    : 06/01/2016 19:07:46                                       #\r\n# Description     : Provides compilation automation to the project            #\r\n###############################################################################\r\n```\r\n\r\n## makefile file\r\n\r\nRequired :\r\n* Usage of `-Wall`, `-ansi`, `-pedantic` flags\r\n\r\n## Example of makefile file\r\n``` gherkin\r\n#### DEFAULT PARAMETERS ####\r\nEXECUTABLE=main.out\r\nSOURCES=main.c\r\nCFLAGS= -Wall -ansi -pedantic\r\nLDFLAGS=\r\nCC=gcc\r\nOBJECTS=$(SOURCES:.c=.o)\r\n\r\n#### CUSTOM PARAMETERS ####\r\n#<NAME>(CAPS LOCK)=your parameters\r\n\r\n#### DEFAULT TARGETS ####\r\nall: $(EXECUTABLE)\r\n$(EXECUTABLE): $(OBJECTS)\r\n\t$(CC) $(LDFLAGS) $(OBJECTS) -o $(EXECUTABLE)\r\n\r\nclean:\r\n    rm $(OBJECTS) $(EXECUTABLE)\r\n\r\n#### CUSTOM TARGET ####\r\n#<Action Name>:\r\n#    Action 1\r\n#    Action 2\r\n#    Action X\r\n\r\n```\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}